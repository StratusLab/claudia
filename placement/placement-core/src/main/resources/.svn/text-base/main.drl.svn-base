#created on: 01-dic-2011
package com.telefonica.euro_iaas.placement.core

#list any import classes here.
import com.telefonica.euro_iaas.placement.model.provider.CloudProvider;
import com.telefonica.euro_iaas.placement.model.provider.VEE;

import com.telefonica.euro_iaas.placement.model.application.VDC;
import com.telefonica.euro_iaas.placement.model.application.ServiceApplication;
import com.telefonica.euro_iaas.placement.model.application.VEERequired;

import com.telefonica.euro_iaas.placement.model.VEEMapping;

#declare any global variables here
global org.slf4j.Logger LOGGER;


rule "Create all the posibilities."
	salience 10
    when
    	$veeProvider : VEE()
    	$veeVDC : VEERequired()
    then
#insert one mapping that is valid (eligible). It will be discarded by next rules (if necessary)
		VEEMapping mapping = new VEEMapping($veeProvider, $veeVDC);
		insert( mapping );
        LOGGER.info ("Inserted: " + mapping); 
end


rule "Filter by memory"
	when
		$mapping : VEEMapping($veeS : veeService ,$veeP : veeProvider )
		VEERequired(this == $veeS, memoryConf > $veeP.memoryConf)
	then
	    LOGGER.info ("Retract for memory: " + $mapping); 
		retract ($mapping)
end


rule "Filter by cpu"
	when
		$mapping : VEEMapping($veeS : veeService ,$veeP : veeProvider )
		VEERequired(this == $veeS, cPUConf > $veeP.cPUConf)
	then
		LOGGER.info ("Retract for cpu: " + $mapping); 
		retract ($mapping)
end


rule "Filter by disk"
	when
		$mapping : VEEMapping($veeS : veeService ,$veeP : veeProvider )
		VEERequired(this == $veeS, diskConf > $veeP.diskConf)
	then
		LOGGER.info ("Retract for disk: " + $mapping);
		retract ($mapping)
end


rule "Delete invalid cloudProvider"
	when
		$cp : CloudProvider()
		$sa : ServiceApplication()
		$veeRequired : VEERequired(serviceApplication == $sa)
		not VEEMapping(veeService == $veeRequired , veeProvider.cloudProvider == $cp)
	then
		LOGGER.info ("Retracted cloud provider: " + $cp ); 
		retract ($cp)
end


rule "Minimum Cost VEE Valid CloudProvider"
	salience -10
	no-loop true
	when
		$serviceApplication : ServiceApplication()
		$cloudProvider : CloudProvider()
		$bestMapping : VEEMapping($veeServiceBest : veeService, $veeProviderBest : veeProvider ,veeService.serviceApplication == $serviceApplication, veeProvider.cloudProvider == $cloudProvider, bestInCP == false)
		not VEEMapping(veeService == $veeServiceBest, veeService.serviceApplication == $serviceApplication, veeProvider.cloudProvider == $cloudProvider , veeProvider.cost < $veeProviderBest.cost)
	then
		#$bestMapping.setBestInCP(true);
		LOGGER.info ("BEST MAPPING for VEERequired: " + $veeServiceBest + " in CP: " +  $cloudProvider + ":"  + $bestMapping );
		modify ($bestMapping) { setBestInCP(true) }
end

rule "delete this."
	salience -15
	when
		$serviceApplication : ServiceApplication()
		$cloudProvider : CloudProvider()
		$mapping : VEEMapping( veeService.serviceApplication == $serviceApplication, bestInCP == true, veeProvider.cloudProvider == $cloudProvider ,$cost : veeProvider.cost )
	then
		LOGGER.info ("best cost:"  + $cost + " cp : " + $cloudProvider);
end


rule "Last step. CloudProvider total price."
	salience -20
	no-loop true
	when
		$serviceApplication : ServiceApplication()
		$cloudProvider : CloudProvider()
		$total : Number() from accumulate ( VEEMapping( veeService.serviceApplication == $serviceApplication, bestInCP == true, veeProvider.cloudProvider == $cloudProvider ,$cost : veeProvider.cost ), sum( $cost ) )
	then
		LOGGER.info ("Total cost calculated for:"  + $cloudProvider + " is: " +  $total.intValue());
		#$cloudProvider.setTotalCost($total.intValue());
		modify ($cloudProvider) { setTotalCost($total.intValue()) }
end

query "Get Allowed Cloud Providers"
	$cp : CloudProvider()
end

query "Get Best Cloud Provider"
	$cp : CloudProvider()
	not CloudProvider(totalCost < $cp.totalCost)
end


